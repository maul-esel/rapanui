grammar rapanui.dsl.Dsl

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "rapanui.dsl"

RuleSystem hidden(WS,SL_COMMENT):
	EOL* (rules+=Rule|definitions+=Definition) (EOL+ (rules+=Rule|definitions+=Definition))* EOL*
;

Rule:
	Theorem|Axiom
;
Definition:
	'define' target=VARIABLE 'as' name=RULE_NAME EOL
		'iff' premises+=Predicate
		(EOL 'and' premises+=Predicate)*
;
Theorem returns Rule:
	'theorem' name=RULE_NAME EOL
		'if' premises+=Predicate
		(EOL 'and' premises+=Predicate)*
		EOL 'then' conclusions+=Predicate
		(EOL 'and' conclusions+=Predicate)*
;
Axiom returns Rule:
	'axiom' name=RULE_NAME EOL
		'always' conclusions+=Predicate
		(EOL 'and' conclusions+=Predicate)*
;

Predicate hidden(WS):
	=>Formula | DefinitionReference
;
Formula:
	left=Term formulaType=BINARY_RELATION right=Term
;
DefinitionReference:
	target=Term 'is' definition=[Definition|RULE_NAME]
;

Term hidden(WS):
	Union
;
VariableReference:
	variable=VARIABLE
;
ConstantReference:
	constant=CONSTANT
;
SimpleTerm returns Term hidden(WS):
	VariableReference
	| ConstantReference
	| '(' Term ')'
;
UnaryOperation returns Term hidden():
	SimpleTerm ({UnaryOperation.operand=current} operator=POSTFIX_UNARY_OPERATOR)*
;

// Implement operator precedence
Composition returns Term hidden(WS):
	UnaryOperation ({BinaryOperation.left=current} operator=COMPOSITION_OP right=UnaryOperation)*
;
SetDifference returns Term hidden(WS):
	Composition ({BinaryOperation.left=current} operator=MINUS_OP right=Composition)*
;
Intersection returns Term hidden(WS):
	SetDifference ({BinaryOperation.left=current} operator=INTERSECTION_OP right=SetDifference)*
;
Union returns Term hidden(WS):
	Intersection ({BinaryOperation.left=current} operator=UNION_OP right=Intersection)*
;

/*
// Alternative: force parentheses
Term hidden(WS):
	BinaryOperation
;
BinaryOperation returns Term hidden(WS):
	UnaryOperation ({BinaryOperation.left=current} operator=BINARY_OPERATOR right=UnaryOperation)?
;
enum BINARY_OPERATOR:
	INTERSECTION = '∩' | UNION = '∪' | MINUS = '\\' | COMPOSITION = ';'
;
*/

enum POSTFIX_UNARY_OPERATOR:
	CONVERSE = '˘' | KLEENE = '*' | PLUS = '⁺' | COMPLEMENT = 'ᶜ'
;

enum COMPOSITION_OP returns BINARY_OPERATOR:
	COMPOSITION = ';'
;
enum MINUS_OP returns BINARY_OPERATOR:
	MINUS = '\\'
;
enum INTERSECTION_OP returns BINARY_OPERATOR:
	INTERSECTION = '∩'
;
enum UNION_OP returns BINARY_OPERATOR:
	UNION = '∪'
;

enum BINARY_RELATION:
	EQUATION = '=' | INCLUSION = '⊆'
;

terminal SL_COMMENT: '#'->EOL;
terminal RULE_NAME: '"' -> '"';
terminal CONSTANT: 'I'|'Π'|'∅';
terminal VARIABLE: 'A'..'H'|'J'..'Z';
terminal EOL: '\r'?'\n';
terminal WS: ' ';
